<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Notes]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>Notes</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 22 May 2025 08:09:48 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 22 May 2025 08:09:48 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[基础语法]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://regexr.com" rel="noopener nofollow" class="external-link" href="https://regexr.com" target="_blank">在线练习网站</a> <br><br>正则表达式一般用两个 // 包裹，后跟一些修饰符<br>
如 g 代表全局匹配，i 代表忽略大小写，m 代表多行匹配<br><br>
<br>显示所有的 at
/at/g


<br>"." 表示换行符外的任意一个字符，at. 表示 at 后跟任意一个字符
/at./g


<br>使用方括号表示字符集合，只匹配指定的几种字符
/at[ces0]/g


<br>方括号内，使用 "-" 表示范围，a-z 表示所有小写字母
/at[a-z]/g

匹配 at 后跟着所有小写字母，或大写字母
/at[a-zA-Z]/g

数字也可以
/at[a-zA-Z1-3]/g


<br>方括号内，使用 ^ 取反，^a-z 表示除了小写字母外的任意字符<br>
（ ^ 只有在方括号内部表示取反）
/at[^a-z]/g

除了字母外的任意字符
/at[^a-zA-Z]/g


<br><br>
<br>\d 表示数字，作用同 [0-9]
/at\d/g


<br>\D 表示非数字，作用同 [^0-9]
/at\D/g


<br>\w 表示字母，数字，或下划线
/at\w/g


<br>W 表示除字母，数字，下划线外的字符 （空白字符或特殊字符）
/at\W/g


<br>\s 表示空白字符 （space 或 tab）
/at\s/g


<br>\S 表示非空白字符
/at\S/g


<br><br><br>
<br>^ 在方括号外，表示匹配整段文本的开头<br>
如启用多行模式 "//m"，也可以表示每一行的开头
/^a/gm


<br>$ 表示匹配每一行的结尾<br>
由于 "." 表示除换行符外的任意一个字符，这里需要加 \ 转义<br>
 	/\.$/gm 	<br>
找到一行中只有 at 的部分<br>
 	/^at$/gm 	<br>
运用：在 VSCode中，可使用 ^ 和 $ 搭配替换模式，在所有行头 / 尾添加相同字符
<br><br>\b 表示单词的边界<br>
<br>匹配以 in 开头的单词
/\bin/g


<br>匹配以 in 结尾的单词
/in\b/g


<br>匹配单词 "in"
/\bin\b/g


<br>\B 表示非单词边界<br>
<br>匹配单词中的 "in"
/\Bin\B/g


<br><br>
<br>"+" 表示前面的字符重复一次或多次，at+ 表示匹配 a 之后跟任意数量的 t
/at+/g


<br>"*" 表示前面的字符重复零次或多次
/at*/g


<br>? 表示前面的字符重复零次或一次
/at?/g


<br>使用 {} 表示指定的重复次数，下表示 attt
/at{3}/g

使用 , 表示范围
/at{3, 5}/g

省略后者，表示至少重复3次
/at{3,}/g

{} 后加 ? 开启非贪婪匹配模式，只要匹配到 3 个 t 就会停止
/at{3,}?/g


<br><br><br>可以将多个字符作为一个整体来处理<br>
<br>加上 () 作为整体，(at)* 表示 at 重复了多次
/(at)*/g

重复了三次
/(at){3}/g


<br>[] 表示内部任意一个都可以，既匹配 Pattern 也匹配 pattern
/[Pp]attern/g


<br>使用 | 表示或
/Pattern|pattern/g


<br>() 与 | 结合，效果类似 []
/(P|p)attern/g


<br><br>
<br>对于 2025-05-22<br>
可以使用 /\d{4}-\d{1,2}-\d{1,2}/g 匹配<br>
捕获分组：/(\d{4})-(\d{1,2})-(\d{1,2})/g<br>
切换为 Replace 模式，输入 $2-$3-$1，即可将日期改为 月-日-年 格式
<br>匹配多种日期格式：<br>
2025.05.22  2025-05-22  2025/05/22  2025_05_22  20250522
/(\d{4})[-/_.]?(\d{1,2})[-/_.]?(\d{1,2})/g


<br><br>使用 (?:)<br>\(\d{4})[-/_.]?(?:\d{1,2})[-/_.]?)(\d{1,2})/g
<br>此时捕获两个分组<br><br>匹配首尾字母相同的单词<br>/\b([a-z])[a-z]*\1\b/g
<br>([a-z])表示第一个字母并分组<br>
[a-z]* 表示中间有零或多个其他字母<br>
\1 表示引用第一个字母<br>
\b 表示边界匹配<br><br>前瞻：匹配某些字符前面的内容<br>
后顾：匹配某些字符后面的内容<br><br>使用 ?= 表示<br>
现有 $100, $200, $abc, $def<br>
如只想匹配 数字 前的 $ 符<br>/\$(?=\d+)/g
<br><br>使用 ?! 表示<br>
如只想匹配 非数字 前的 $ 符<br>/\$(?!\d+)/g
<br><br>使用 ?&lt;= 表示<br>
现有 $100, $200, $abc, $def, #100, #200<br>
如只想匹配 美元符 后的数字<br>/(?&lt;=\$)\d+/g
<br><br>使用 ?&lt;! 表示<br>
如只想匹配 非 $ 后的数字<br>/(?&lt;!\$)\b\d+\b/g
]]></description><link>tools\regex\regex-operation-guide.html</link><guid isPermaLink="false">tools/RegEx/RegEx Operation Guide.md</guid><pubDate>Thu, 22 May 2025 08:09:15 GMT</pubDate></item></channel></rss>